generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id               String              @id @default(uuid())
    name             String
    email            String              @unique
    role             String              @default("user")
    password         String
    description      String?
    image            String?
    organization     String?
    location         String?
    isAccountDeleted Boolean             @default(false)
    createdAt        DateTime            @default(now())
    resume           String?
    skills           String?
    noOfFollowers    Int                 @default(0)
    noOfFollowings   Int                 @default(0)
    isPasswordSet    Boolean             @default(false)
    followers        Follower[]          @relation("UserFollowing")
    followed         Follower[]          @relation("UserFollowed")
    requestSent      InterviewRequests[] @relation("userSent")
    requestRecived   InterviewRequests[] @relation("userRecived")
    chatsFrom        Chats[]             @relation("chatsFrom")
    chatsTo          Chats[]             @relation("chatsTo")
    notification     Notifications[]     @relation("notificationFor")
    ratingsGiven     Ratings[]           @relation("ratingGiven")
    ratingsGot       Ratings[]           @relation("ratingGot")
}

model Follower {
    id         String @id @default(uuid())
    userId     String
    followerId String
    follower   User   @relation("UserFollowing", fields: [followerId], references: [id])
    followed   User   @relation("UserFollowed", fields: [userId], references: [id])
}

enum Status {
    pending
    accepted
    completed
    rejected
}

model InterviewRequests {
    id        String    @id @default(uuid())
    from      String
    to        String
    createdAt DateTime  @default(now())
    status    Status    @default(pending)
    seen      Boolean   @default(false)
    fromuser  User      @relation("userSent", fields: [from], references: [id])
    touser    User      @relation("userRecived", fields: [to], references: [id])
    rating    Ratings[] @relation("interview-rating")
}

model Chats {
    id        String   @id @default(uuid())
    chatId    String
    from      String
    to        String
    status    String   @default("unseen")
    text      String
    createdAt DateTime @default(now())
    fromUser  User     @relation("chatsFrom", fields: [from], references: [id])
    toUser    User     @relation("chatsTo", fields: [to], references: [id])
}

model Notifications {
    id        String   @id @default(uuid())
    userId    String
    title     String
    content   String
    link      String?
    seen      Boolean  @default(false)
    createdAt DateTime @default(now())
    User      User     @relation("notificationFor", fields: [userId], references: [id])
}

model Ratings {
    id            String            @id @default(uuid())
    userId        String
    interviewId   String
    interviewerId String
    rating        Int
    review        String
    createdAt     DateTime          @default(now())
    User          User              @relation("ratingGiven", fields: [userId], references: [id])
    interviewer   User              @relation("ratingGot", fields: [interviewerId], references: [id])
    interview     InterviewRequests @relation("interview-rating", fields: [interviewId], references: [id])
}
